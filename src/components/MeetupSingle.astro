---
import IconDots from "./icons/icon-dots.astro";
import FecAnchor from "./FecAnchor.astro";
import IconFacebook from "./icons/icon-facebook.astro";
import IconTwitter from "./icons/icon-twitter.astro";
import IconLinkedin from "./icons/icon-linkedin.astro";
import MeetupAlbum from "./MeetupAlbum.astro";
import MeetupGallery from "./MeetupGallery.astro";
import SessionList from "./SessionList.astro";
import { getPhotos, photoAlbumSource } from "@utils/api";
import { random, vTransitionName } from "@utils/helpers";
import MeetupSonspor from "./MeetupSonspor.astro";
import UserData from "./UserData.vue";
import RsvpComponent from "./user/rsvp-component.vue";
import RsvpAttendeeList from "./user/rsvp-attendee-list.vue";
import BaseHeading from "./base/BaseHeading.astro";

const props = Astro.props;

const dateInPast = function (firstDate: Date, secondDate: Date) {
  if (firstDate.setHours(0, 0, 0, 0) <= secondDate.setHours(0, 0, 0, 0))
    return true;

  return false;
};

const accepting_rsvp = props.getCurrentEvent.accepting_rsvp;
const rsvp_closing_date = props.getCurrentEvent.rsvp_closing_date;

function isUpcoming() {
  const past = new Date(props.getCurrentEvent.Date);
  const today = new Date();
  const verifyValue = dateInPast(past, today);
  return !verifyValue;
}

// Google Photos Album Section
const albumsPhotos = await getPhotos();

let maxAlbumLength = 0;

function fetchAlbumDetails(albumName: string) {
  if (!albumName) return [];

  if (albumsPhotos) {
    const albumPhotosParsed = albumsPhotos[albumName];
    // check if array
    if (Array.isArray(albumPhotosParsed)) {
      maxAlbumLength = albumPhotosParsed.length;
      // filter all strings that end with .mp4
      const filteredPhotos = albumPhotosParsed.filter((photo) => {
        return !photo.endsWith(".mp4");
      });
      // return filteredPhotos.slice(0, limit);
      return filteredPhotos;
    }
  }
}

let currentAlbum = fetchAlbumDetails(props.getCurrentEvent.album);

const getRelatedPhotoSource = (album: string) => {
  let albumList = fetchAlbumDetails(album) as string[];
  let randomImage = random(albumList);
  return `${photoAlbumSource}/${randomImage}`;
};
---

<div>
  <div data-title={props.getCurrentEvent.title}>
    <div class="relative">
      <div class="pb-10 md:pb-24">
        <div class="contain">
          <div class="relative">
            <div
              aria-hidden="true"
              class="hidden sm:block lg:inset-y-0 lg:right-0 lg:w-screen"
            >
              <div
                class="inset-y-0 right-1/2 w-full rounded-r-3xl bg-gray-50 lg:right-72"
              >
              </div>
              <!-- <IconDots class="w-[400px] xl:w-[600px] opacity-5 saturate-0" /> -->
            </div>
          </div>

          <div
            class="relative mx-auto px-8 py-3 sm:px-6 md:px-0 md:mx-0 md:py-24"
          >
            <!-- Content area -->
            <div>
              {
                isUpcoming() && (
                  <div class="flex w-full items-center justify-start pb-4">
                    <p
                      class:list={[
                        isUpcoming()
                          ? "tagStyle bg-green-100 text-green-800"
                          : "tagStyle bg-yellow-100 text-yellow-800",
                        ,
                        "p-2 rounded-full text-sm font-medium tracking-wide uppercase px-4",
                      ]}
                    >
                      happening soon
                    </p>
                  </div>
                )
              }
              <div
                class="text-base uppercase text-verse-900 dark:text-verse-200 font-semibold"
              >
                Topic
              </div>

              <div
                style={vTransitionName(
                  "session-title",
                  props.getCurrentEvent.id
                )}
              >
                <BaseHeading
                  level={1}
                  class="text-3xl font-extrabold tracking-loose text-verse-500 md:text-4xl lg:text-6xl"
                >
                  {props.getCurrentEvent?.title}
                </BaseHeading>
              </div>

              <div class="grid md:grid-cols-2">
                <SessionList sessions={props.getCurrentEvent.sessions} />

                {
                  accepting_rsvp && (
                    <RsvpComponent meetup={props.getCurrentEvent} client:only />
                  )
                }

                <!-- Internal RSVP Button -->
                <MeetupGallery
                  currentAlbum={currentAlbum}
                  source={photoAlbumSource}
                  animationSpeed={4000}
                />
              </div>

              <MeetupSonspor sponsors={props.getCurrentEvent.sponsors} />
            </div>
            <!-- Stats section -->
            <div class="mt-10">
              <dl
                class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4 md:gap-y-8"
              >
                {
                  props.getCurrentEvent.Date && (
                    <div class="border-t-2 border-verse-900/20 dark:border-verse-800/50 pt-6">
                      <dt class="text-base font-medium text-verse-500 dark:text-verse-300">
                        Date
                      </dt>
                      <dd class="text-2xl font-extrabold tracking-tight text-verse-900 dark:text-verse-200 md:text-3xl">
                        {new Date(props.getCurrentEvent.Date).toDateString()}
                      </dd>
                    </div>
                  )
                }
                {
                  props.getCurrentEvent.Venue && (
                    <div class="border-t-2 border-verse-900/20 dark:border-verse-800/50 pt-4 md:pt-6">
                      <dt class="text-base font-medium text-verse-500 dark:text-verse-300">
                        Venue
                      </dt>
                      <dd class="text-2xl font-extrabold tracking-tight text-verse-900 dark:text-verse-200 md:text-3xl">
                        {props.getCurrentEvent.Venue}
                      </dd>
                    </div>
                  )
                }
                {
                  props.getCurrentEvent.Time && (
                    <div class="border-t-2 border-verse-900/20 dark:border-verse-800/50 pt-4 md:pt-6">
                      <dt class="text-base font-medium text-verse-500 dark:text-verse-300">
                        Time
                      </dt>
                      <dd class="text-2xl font-extrabold tracking-tight text-verse-900 dark:text-verse-200 md:text-3xl">
                        {props.getCurrentEvent.Time}
                      </dd>
                    </div>
                  )
                }
                {
                  props.getCurrentEvent.Location && (
                    <div class="border-t-2 border-verse-900/20 dark:border-verse-800/50 pt-4 md:pt-6">
                      <dt class="text-base font-medium text-verse-500 dark:text-verse-300">
                        Location
                      </dt>
                      <dd class="text-2xl font-extrabold tracking-tight text-verse-900 dark:text-verse-200 md:text-3xl">
                        {props.getCurrentEvent.Location}
                      </dd>
                    </div>
                  )
                }
                {
                  (props.getCurrentEvent.Attendees ||
                    props.getCurrentEvent.seats_available) && (
                    <div class="border-t-2 border-verse-900/20 dark:border-verse-800/50 pt-6">
                      <dt class="text-base font-medium text-verse-500 dark:text-verse-300">
                        Seats Limit
                      </dt>
                      <dd class="text-2xl font-extrabold tracking-tight text-verse-900 dark:text-verse-200 md:text-3xl">
                        {props.getCurrentEvent.Attendees ||
                          props.getCurrentEvent.seats_available}
                      </dd>
                    </div>
                  )
                }

                <!-- Share Functions -->

                <script is:inline>
                  function copy() {
                    const copyText = document.getElementById("myInput");
                    copyText.select();
                    copyText.setSelectionRange(0, 99999);
                    navigator.clipboard.writeText(copyText.value);
                  }

                  function shareOnFacebook() {
                    const navUrl =
                      "https://www.facebook.com/sharer/sharer.php?u=" +
                      `${window.location.href}`;
                    window.open(navUrl, "_blank");
                  }

                  function shareOnTwitter() {
                    const getTitleFromDataTitle = document
                      .querySelector("[data-title]")
                      .getAttribute("data-title");
                    const str = encodeURIComponent(
                      " #mauritius #frontendcoders "
                    );
                    const navUrl =
                      `https://twitter.com/intent/tweet?text=${getTitleFromDataTitle}${str}` +
                      `${window.location.href}`;
                    window.open(navUrl, "_blank");
                  }

                  function shareOnLinkedIn() {
                    const navUrl =
                      "http://www.linkedin.com/shareArticle?mini=true&url=" +
                      `${window.location.href}`;
                    window.open(navUrl, "_blank");
                  }
                </script>

                <!-- Share Buttons -->
                <div
                  class="border-y-2 border-verse-900/20 dark:border-verse-800/50 pt-4 md:pt-6"
                >
                  <dt
                    class="text-base font-medium text-verse-500 dark:text-verse-300"
                  >
                    Share
                  </dt>
                  <div class="flex gap-8 py-4">
                    <button
                      class="hover:text-[#4267B2] text-verse-500 dark:text-verse-200"
                      onclick="shareOnFacebook()"
                    >
                      <IconFacebook class="w-10 md:w-12" />
                    </button>
                    <button
                      class="hover:text-[#00acee] text-verse-500 dark:text-verse-200"
                      onclick="shareOnTwitter()"
                    >
                      <IconTwitter class="w-10 md:w-12" />
                    </button>
                    <button
                      class="hover:text-[#007db1] text-verse-500 dark:text-verse-200"
                      onclick="shareOnLinkedIn()"
                    >
                      <IconLinkedin class="w-10 md:w-12" />
                    </button>
                  </div>
                  <dd
                    class="flex justify-between rounded-md bg-gray-100 mt-2 px-2 py-1 lg:w-[450px]"
                  >
                    <input
                      id="myInput"
                      class="text-md break-words bg-gray-100pr-2 tracking-tight bg-gray-100 text-gray-600 line-clamp-3 w-[500px]"
                      type="text"
                      value={`https://frontend.mu/meetup/${props.routeId}/`}
                      onclick="copy()"
                    />
                    <div class="cursor-pointer" onclick="copy()">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"
                        ></path>
                        <path
                          d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z"
                        ></path>
                      </svg>
                    </div>
                  </dd>
                </div>
              </dl>
            </div>
          </div>
        </div>

        <div class="contain">
          <RsvpAttendeeList
            client:only
            seatCapacity={props.getCurrentEvent.seats_available}
            meetupId={props.routeId}
          />
        </div>

        <MeetupAlbum currentAlbum={currentAlbum} source={photoAlbumSource} />
      </div>
    </div>
  </div>
</div>
