---
import BaseHeading from "./base/BaseHeading.astro";

const {
  numOfSpeakers = 0,
  numOfMeetups = 0,
  numOfContributors = 0,
} = Astro.props;
---

<div class="max-w-6xl mx-auto pt-14 px-8 md:px-16">
  <BaseHeading class="text-center">Our Numbers So Far</BaseHeading>
  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div
      class="h-full flex justify-between items-center flex-col gap-4 p-6 prose dark:prose-invert"
    >
      <p
        class="font-bold text-8xl mb-0 accent stat-num"
        data-final-num={numOfSpeakers}
      >
        0
      </p>
      <p class="text-2xl mt-0">Speakers</p>
    </div>
    <div
      class="h-full flex justify-between items-center flex-col gap-4 p-6 prose dark:prose-invert"
    >
      <p
        class="font-bold text-8xl mb-0 accent stat-num"
        data-final-num={numOfMeetups}
      >
        0
      </p>
      <p class="text-2xl mt-0">Meetups</p>
    </div>
    <div
      class="h-full flex justify-between items-center flex-col gap-4 p-6 prose dark:prose-invert"
    >
      <p
        class="font-bold text-8xl mb-0 accent stat-num"
        data-final-num={numOfContributors}
      >
        0
      </p>
      <p class="text-2xl mt-0">Contributors</p>
    </div>
  </div>
</div>

<script>
  function counterAnimation() {
    const onIntersect = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          let startNum = 0;
          const finalNum = +entry.target.getAttribute("data-final-num");

          if (!!finalNum) {
            let duration = Math.floor(700 / finalNum);

            const counter = setInterval(() => {
              startNum += 1;
              entry.target.textContent = `${startNum}`;

              if (startNum === finalNum) clearInterval(counter);
              observer.unobserve(entry.target);
            }, duration);
          }
        }
      });
    };

    const observor = new IntersectionObserver(onIntersect, { threshold: 0.5 });
    document
      .querySelectorAll(".stat-num")
      .forEach((statNum) => observor.observe(statNum));
  }

  document.addEventListener("DOMContentLoaded", counterAnimation);
  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", counterAnimation);
</script>

<style>
  .accent {
    background: linear-gradient(
      135deg,
      hsl(13, 100%, 52%) 10%,
      hsl(var(--brand-hue), 100%, 70%) 50%,
      hsl(13, 100%, 52%) 80%,
      hsl(var(--brand-hue), 100%, 69%) 90%
    );
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-size: 400% 400%;
    animation: gradient-animation 12s ease infinite;
  }
</style>
